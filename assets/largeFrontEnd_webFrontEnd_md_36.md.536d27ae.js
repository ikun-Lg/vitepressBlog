import{_ as a,o as p,c as n,S as s,k as e}from"./chunks/framework.350e47e2.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"largeFrontEnd/webFrontEnd/md/36.md","filePath":"largeFrontEnd/webFrontEnd/md/36.md","lastUpdated":null}'),l={name:"largeFrontEnd/webFrontEnd/md/36.md"},o=s('<h2 id="四、vue" tabindex="-1">四、Vue <a class="header-anchor" href="#四、vue" aria-label="Permalink to &quot;四、Vue&quot;">​</a></h2><h3 id="_1-v-if和v-show的区别" tabindex="-1">1.v-if和v-show的区别？ <a class="header-anchor" href="#_1-v-if和v-show的区别" aria-label="Permalink to &quot;1.v-if和v-show的区别？&quot;">​</a></h3><p>​ 都可以控制元素的显示和隐藏</p><p>​ 1.v-show是控制元素的display值来让元素显示和隐藏，v-if显示隐藏时把DOM元素整个添加和删除</p><p>​ 2.v-if有一个局部编译/卸载的过程，切换这个过程中会适当地销毁和重建内部事件监听和子组件；v-show只是简单的css切换</p><p>​ 3.v-if才是真正的条件渲染：v-show从false变成true的时候不会触发组件的生命周期，v-if会触发生命周期</p><p>​ 4.v-if的切换效率比较低，v-show的x效率比较高</p><h3 id="_2-如何理解mvvm的" tabindex="-1">2.如何理解MVVM的？ <a class="header-anchor" href="#_2-如何理解mvvm的" aria-label="Permalink to &quot;2.如何理解MVVM的？&quot;">​</a></h3><p>​ 是Model-View-ViewModel的缩写，前端开发的框架模式</p><p>​ M:模型，对应的就是data的数据</p><p>​ V:视图，用户界面，DOM</p><p>​ VM：视图模型：Vue的实例对象，连接View和Model的桥梁，核心是提供对View和ViewModel的双向数据绑定，当数据改变的时候，ViewModel能监听到数据的变化，自动更新视图，当用户操作视图的时候，ViewModel也可以监听到视图的变化，然后通知数据进行改动，这就实现了数据的双向绑定，VIewModel通过双向绑定把View和Model连接起来，他们之间的同步是自动的，不需要人为干涉，所以我们只需要关注业务逻辑即可，不需要操作DOM，同时也不需要关注数据的状态问题，因为它是由DOM统一管理。</p><h3 id="_3-v-for中key值得作用是什么" tabindex="-1">3.v-for中key值得作用是什么？ <a class="header-anchor" href="#_3-v-for中key值得作用是什么" aria-label="Permalink to &quot;3.v-for中key值得作用是什么？&quot;">​</a></h3><p>​ key属性时DOM属性的唯一标识</p><p>​ 作用：</p><p>​ 1.提高虚拟DOM的更新</p><p>​ 2.若不设置key，可能会触发一些bug</p><p>​ 3.为了触发过渡效果</p><h3 id="_4-说一下你对vue生命周期的理解。" tabindex="-1">4.说一下你对Vue生命周期的理解。 <a class="header-anchor" href="#_4-说一下你对vue生命周期的理解。" aria-label="Permalink to &quot;4.说一下你对Vue生命周期的理解。&quot;">​</a></h3><p>​ 组件从创建到销毁的过程就是它的生命周期</p><p>​ 创建</p><p>​ beforeCreate</p><p>​ 在这个阶段属性和方法都不能使用</p><p>​ created</p><p>​ 这里是实例创建完成之后，在这里完成了数据监测，可以使用数据，修改数据，不会触发updated，也不会更新视图</p><p>​ 挂载</p><p>​ beforeMount</p><p>​ 完成了模板的编译，虚拟Dom也完成创建，即将渲染，修改数据不会触发updated</p><p>​ mounted</p><p>​ 把编译好的模板挂载到页面，这里可以发送异步请求也可以访问DOM节点</p><p>​ 更新</p><p>​ beforeUpdate</p><p>​ 组件数据更新之前使用，数据是新的，页面上的数据是旧的，组件即将更新，准备渲染，可以改数据</p><p>​ updated</p><p>​ render重新做了渲染，这时数据和页面都是新的，避免在此更新数据</p><p>​ 销毁</p><p>​ beforeDestroy</p><p>​ 实例销毁前，在这里实例还可以用，可以清除定时器等等</p><p>​ destroyed</p><p>​ 组件已经被销毁了，全部都销毁</p><p>​ 使用keep-alive时多出两个周期</p><p>​ actived</p><p>​ 组件激活时</p><p>​ deactived</p><p>​ 组件被销毁时</p><h3 id="_5-在created和mounted去请求数据-有什么区别" tabindex="-1">5.在created和mounted去请求数据，有什么区别？ <a class="header-anchor" href="#_5-在created和mounted去请求数据-有什么区别" aria-label="Permalink to &quot;5.在created和mounted去请求数据，有什么区别？&quot;">​</a></h3><p>​ created:在渲染前调用，通常先初始化属性，然后做渲染</p><p>​ mounted:在模板渲染完成后，一般都是初始化页面后，在对元素节点进行操作</p><p>​ 在这里请求数据可能会出现闪屏问题，created不会</p><p>​ 一般用created比较多</p><p>​ 请求的数据对DOM有影响，那么使用created</p><p>​ 如果没有影响则使用mounted</p><h3 id="_6-vue的修饰符有哪些" tabindex="-1">6.vue的修饰符有哪些？ <a class="header-anchor" href="#_6-vue的修饰符有哪些" aria-label="Permalink to &quot;6.vue的修饰符有哪些？&quot;">​</a></h3><p>​ 1.事件修饰符</p><p>​ .stop 阻止冒泡</p><p>​ .prevent 阻止默认行为</p><p>​ .capture 内部元素触发的事件先在这里处理</p><p>​ .self 只有在event.target是当前元素时触发</p><p>​ .once 事件只会触发一次</p><p>​ .passive 立即触发默认行为</p><p>​ .native 把元素当做原生标签看待</p><p>​ 2.按键修饰符</p><p>​ .keyup 键盘抬起</p><p>​ .keydown 键盘按下</p><p>​ 3.系统修饰符</p><p>​ .ctrl</p><p>​ .alt</p><p>​ .meta</p><p>​ 4.鼠标修饰符</p><p>​ .left 鼠标左键</p><p>​ .right 鼠标右键</p><p>​ .middle 鼠标中建</p><p>​ 5.表单修饰符</p><p>​ .lazy 等输入完之后再显示</p><p>​ .trim 删除内容前后的空格</p><p>​ .number 输入是数字或转为数字</p><h3 id="_7-elemenui是怎么做表单验证的" tabindex="-1">7.elemenUI是怎么做表单验证的？ <a class="header-anchor" href="#_7-elemenui是怎么做表单验证的" aria-label="Permalink to &quot;7.elemenUI是怎么做表单验证的？&quot;">​</a></h3><p>​ 1.在表单中加rules属性，然后在data里写校验规则</p><p>​ 2.内部添加规则</p><p>​ 3.自定义函数校验</p><h3 id="_8-vue如何进行组件通信" tabindex="-1">8.vue如何进行组件通信？ <a class="header-anchor" href="#_8-vue如何进行组件通信" aria-label="Permalink to &quot;8.vue如何进行组件通信？&quot;">​</a></h3><p>​ 1.父传子</p><p>​ props</p><p>​ 父组件使用自定义属性，然后子组件使用props</p><p>​ $ref</p><p>​ 引用信息会注册在父组件的$refs对象上</p><p>​ 2.子传父</p><p>​ $emit</p><p>​ 子组件绑定自定义事件，触发事件执行后，传给父组件，父组件需要事件监听接收参数</p><p>​ 3.兄弟传值</p><p>​ 全局事件总线$bus</p><p>​ new一个新的vue实例，用on和emit来对数据进行传输</p><p>​</p><h3 id="_9-keep-alive是什么-怎么使用" tabindex="-1">9.keep-alive是什么？怎么使用？ <a class="header-anchor" href="#_9-keep-alive是什么-怎么使用" aria-label="Permalink to &quot;9.keep-alive是什么？怎么使用？&quot;">​</a></h3><p>​ vue的一个内置组件，包裹组件的时候，会缓存不活跃的组件实例，并不是销毁他们</p><p>​ 作用：把组件切换的状态保存在内存里，防止重复渲染DOM节点，减少加载时间和性能消耗，提高用户体验</p><p>​</p><h3 id="_10-axios是怎么做封装的" tabindex="-1">10.axios是怎么做封装的？ <a class="header-anchor" href="#_10-axios是怎么做封装的" aria-label="Permalink to &quot;10.axios是怎么做封装的？&quot;">​</a></h3><p>​ 下载 创建实例 接着封装请求拦截器和响应拦截器 抛出 最后封装接口</p><h3 id="_11-vue路由时怎么传参" tabindex="-1">11.vue路由时怎么传参？ <a class="header-anchor" href="#_11-vue路由时怎么传参" aria-label="Permalink to &quot;11.vue路由时怎么传参？&quot;">​</a></h3><p>​ params传参</p><p>​ this.$router.push({name:&#39;index&#39;,params:{id:item.id}})</p><p>​ this.$route.params.id</p><p>​ 路由属性传参</p><p>​ this.$router.push({name:&#39;/index/${item.id}&#39;})</p>',105),t=e("p",{"path:index:id":""},"​ 路由配置",-1),r=s(`<p>​ query传参(可以解决页面刷新参数丢失的问题)</p><p>​ this.$router.push({name:&#39;index,query:{id:item.id}})</p><h3 id="_12-vue路由的hash模式和history模式有什么区别" tabindex="-1">12.vue路由的hash模式和history模式有什么区别？ <a class="header-anchor" href="#_12-vue路由的hash模式和history模式有什么区别" aria-label="Permalink to &quot;12.vue路由的hash模式和history模式有什么区别？&quot;">​</a></h3><p>​ 1.hash的路由地址上有#号，history模式没有</p><p>​ 2.在做回车刷新的时候，hash模式会加载对应页面，history会报错404</p><p>​ 3.hash模式支持低版本浏览器，history不支持，因为是H5新增的API</p><p>​ 4.hash不会重新加载页面，单页应用必备</p><p>​ 5.history有历史记录，H5新增了pushState和repalceState去修改历史记录，并不会发送请求</p><p>​ 6.history需要后台配置</p><h3 id="_13-路由拦截是怎么实现的" tabindex="-1">13.路由拦截是怎么实现的？ <a class="header-anchor" href="#_13-路由拦截是怎么实现的" aria-label="Permalink to &quot;13.路由拦截是怎么实现的？&quot;">​</a></h3><p>​ 路由拦截 axios拦截</p><p>​ 需要在路由配置中添加一个字段，它是用于判断路由是否需要拦截</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;index&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;/index&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;Index&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">meta</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">requirAuth</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">before</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(to.meta.requirAuth){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(store.sate.token){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;index&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;/index&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;Index&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">meta</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">requirAuth</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">before</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">,</span><span style="color:#E36209;">from</span><span style="color:#24292E;">,</span><span style="color:#E36209;">next</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(to.meta.requirAuth){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(store.sate.token){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="_14-说一下vue的动态路由。" tabindex="-1">14.说一下vue的动态路由。 <a class="header-anchor" href="#_14-说一下vue的动态路由。" aria-label="Permalink to &quot;14.说一下vue的动态路由。&quot;">​</a></h3><p>​ 要在路由配置里设置meta属性，扩展权限相关属性，在路由导航守卫里通过判断这个权限标识，实现路由的动态增加和跳转</p><p>​ 根据用户登录的账号，返回用户角色</p><p>​ 前端再根据角色，跟路由表的meta.role进行匹配</p><p>​ 把匹配搭配的路由形成可访问的路由</p><h3 id="_15-如何解决刷新后二次路由加载" tabindex="-1">15.如何解决刷新后二次路由加载？ <a class="header-anchor" href="#_15-如何解决刷新后二次路由加载" aria-label="Permalink to &quot;15.如何解决刷新后二次路由加载？&quot;">​</a></h3><p>​ 1.window.location.reload()</p><p>​ 2.matcher</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRouter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resetRouter</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newRouter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRouter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    router.matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newRouter.matcher</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resetRouter</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newRouter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    router.matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newRouter.matcher</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>​</p><h3 id="_16-vuex刷新数据会丢失吗-怎么解决" tabindex="-1">16.vuex刷新数据会丢失吗？怎么解决？ <a class="header-anchor" href="#_16-vuex刷新数据会丢失吗-怎么解决" aria-label="Permalink to &quot;16.vuex刷新数据会丢失吗？怎么解决？&quot;">​</a></h3><p>​ vuex会重新获取数据，页面也会丢失数据</p><p>​ 1.把数据直接保存在浏览器缓存里（cookie localstorage sessionstorage）</p><p>​ 2.页面刷新的时候，再次请求数据，达到可以动态更新的方法</p><p>​ 监听浏览器刷新数据，在刷新前把数据保存到sessionstorage里，刷新后请求数据，请求到了用vuex，如果没有那就用sessionstorage里的数据</p><h3 id="_17-computed和watch的区别" tabindex="-1">17.computed和watch的区别？ <a class="header-anchor" href="#_17-computed和watch的区别" aria-label="Permalink to &quot;17.computed和watch的区别？&quot;">​</a></h3><p>​ 1.computed是计算属性，watch是监听，监听的是data中数据的变化</p><p>​ 2.computed是支持缓存，依赖的属性的值变化时，计算属性才会重新计算，否则用缓存，watch不支持缓存</p><p>​ 3.computed不支持异步，watch可以异步操作</p><p>​ 4.computed是第一次加载就监听，watch不监听</p><p>​ 5.computed函数中必须有return ，watch不用</p><h3 id="_18-vuex在什么场景会去使用" tabindex="-1">18.vuex在什么场景会去使用？ <a class="header-anchor" href="#_18-vuex在什么场景会去使用" aria-label="Permalink to &quot;18.vuex在什么场景会去使用？&quot;">​</a></h3><p>​ state 存储变量</p><p>​ getters state的计算属性</p><p>​ mutations 提交更新数据的方法</p><p>​ actions 和mutations差不多，是提交mutationos来修改数据，可以包括异步操作</p><p>​ modules 模块化vuex</p><p>​ 使用场景：</p><p>​ 用户个人信息、购物车模块、订单模块</p><h3 id="_19-vue的双向数据绑定原理是什么" tabindex="-1">19.vue的双向数据绑定原理是什么？ <a class="header-anchor" href="#_19-vue的双向数据绑定原理是什么" aria-label="Permalink to &quot;19.vue的双向数据绑定原理是什么？&quot;">​</a></h3><p>​ 通过数据劫持和发布订阅者模式来实现，同时利用Object.defineProperty（）劫持各个属性的setter和getter，在数据发生改变的时候发布消息给订阅者，触发对应的监听回调渲染视图，也就是说数据和视图是同步的，数据发生改变，视图跟着改变，试图改变，数据也会发生改变</p><p>​ 第一步：需要observer的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter</p><p>​ 第二步：compile模板解析指令，把模板中的变量替换成数据，然后初始化渲染视图，通同时把每个指令对应的节点绑定上更新函数，添加订阅者，如果数据变化，收到通知，更新视图</p><p>​ 第三步：watchr订阅者是Obeserver和compile之间的通信桥梁，作用：</p><p>​ 1.在自身实例化的时候往订阅器内添加自己</p><p>​ 2.自身要有一个update（）方法</p><p>​ 3.等待属性变动时，调用自身的update方法，触发compile这种回调</p><p>​ 第四步：MVVM作为数据绑定的入口，整合了observer、compile和watcher三者，通过observer来监听自己的数据变化，通过compile解析模板指令，最后利用watcher把observer和compile联系起来，最终达到数据更新视图更新，视图更新数据更新的效果</p><h3 id="_20-了解过diff算法和虚拟dom吗" tabindex="-1">20.了解过diff算法和虚拟DOM吗？ <a class="header-anchor" href="#_20-了解过diff算法和虚拟dom吗" aria-label="Permalink to &quot;20.了解过diff算法和虚拟DOM吗？&quot;">​</a></h3><p>​ 虚拟DOM，描述元素与元素之间的关系，创建一个JS对象</p><p>​ 如果组件内有响应的数据，数据发生改变的时候，render函数会生成一个新的虚拟DOM，这个新的虚拟DOM会和旧的虚拟DOM进行比对，找到需要修改的虚拟DOM内容，然后去对应的真实DOM中修改</p><p>​ diff算法就是虚拟DOM的比对时用的，返回一个patch对象，这个对象的作用就是存储两个节点不同的地方，最后用patch里记录的信息进行更新真实DOM</p><p>​ 步骤：</p><p>​ 1.JS对象表示真实的DOM结构，要生成一个虚拟的DOM，再用虚拟DOM构建一个真实的DOM树，渲染到页面</p><p>​ 2.状态改变生成新的虚拟DOM，跟旧的虚拟DOM进行比对，这个比对的过程就是diff算法，利用patch记录差异</p><p>​ 3.把记录的差异用在第一个虚拟DOM生成的真实DOM上，视图就更新了</p><h3 id="_21-vue和jquery的区别是什么" tabindex="-1">21.vue和jquery的区别是什么？ <a class="header-anchor" href="#_21-vue和jquery的区别是什么" aria-label="Permalink to &quot;21.vue和jquery的区别是什么？&quot;">​</a></h3><p>​ 1.原理不同</p><p>​ vue就是数据绑定；jq是先获取dom再处理</p><p>​ 2.着重点不同</p><p>​ vue是数据驱动，jq是着重于页面</p><p>​ 3.操作不同</p><p>​ 4.未来发展不同</p><h3 id="_22-vuex的响应式处理。" tabindex="-1">22.vuex的响应式处理。 <a class="header-anchor" href="#_22-vuex的响应式处理。" aria-label="Permalink to &quot;22.vuex的响应式处理。&quot;">​</a></h3><p>​ vuex是vue的状态管理工具</p><p>​ vue中可以直接触发methods中的方法，vuex是不可以的。为了处理异步，当触发事件的时候会通过dispatch来访问actions中的方法，actions中的commit会触发mutations中的方法从而修改state里的值，通过getter把数据更新到视图</p><p>​ Vue.use(vuex)，调用install方法，通过applyMIxin（vue）在任意组件内执行this.$store就可以访问到store对象</p><p>​ vuex的state是响应式的，借助的就是vue的data，把state存到vue实例组件的data中</p><h3 id="_23-vue中遍历全局的方法有哪些" tabindex="-1">23.vue中遍历全局的方法有哪些？ <a class="header-anchor" href="#_23-vue中遍历全局的方法有哪些" aria-label="Permalink to &quot;23.vue中遍历全局的方法有哪些？&quot;">​</a></h3><p>​ 1.普通遍历，对象.forEach（）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">       console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(item,index)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index</span><span style="color:#24292E;">,</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">       console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(item,index)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>​ 2.对元素统一操作 对象.map()</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> newArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> item</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> newArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> item</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>​ 3.查找符合条件的元素 对象.filter()</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(item</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        retrun </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(item</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        retrun </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>​ 4.查询符合条件的元素，返回索引 对象.findindex()</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">findindex</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(item){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">findindex</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(item){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>​ 对象.evening() 遇到不符合的对象会停止；</p><p>​ 对象.some() 找到符合条件的元素就会停止；</p><h3 id="_24-如何搭建一个脚手架" tabindex="-1">24.如何搭建一个脚手架？ <a class="header-anchor" href="#_24-如何搭建一个脚手架" aria-label="Permalink to &quot;24.如何搭建一个脚手架？&quot;">​</a></h3><p>​ 下载： node cnpm webpack vue-cli</p><p>​ 创建项目：</p><p>​ 1.找到对应的文件，然后利用node指令创建（cmd）</p><p>​ 2.vue init webpack xxx</p><p>​ 3.回车项目描述</p><p>​ 4.作者回车</p><p>​ 5.选择vue build</p><p>​ 6.回车</p><p>​ 7.输入n</p><p>​ 8.不安装yarn</p><p>​ 9.输入npm run dev</p><h3 id="_25-如何封装一个组件" tabindex="-1">25.如何封装一个组件？ <a class="header-anchor" href="#_25-如何封装一个组件" aria-label="Permalink to &quot;25.如何封装一个组件？&quot;">​</a></h3><p>​ 1.使用Vue.extend()创建一个组件</p><p>​ 2.使用Vue.components()方法注册组件</p><p>​ 3.如果子组件需要数据，可以在props中接收定义</p><p>​ 4.子组件修改好数据，要把数据传递给父组件，可以使用emit()方法</p><p>​ 原则：</p><p>​ 把功能分开</p><p>​ 尽量让组件原子化，一个组件做一件事情</p><p>​ 容器组件管数据，展示组件管视图</p><h3 id="_26-封装一个可复用的组件-需要满足什么条件" tabindex="-1">26.封装一个可复用的组件，需要满足什么条件？ <a class="header-anchor" href="#_26-封装一个可复用的组件-需要满足什么条件" aria-label="Permalink to &quot;26.封装一个可复用的组件，需要满足什么条件？&quot;">​</a></h3><p>​ 1.低耦合，组件之间的依赖越小越好</p><p>​ 2.最好是从父组件传入信息，不要再公共组件中请求数据</p><p>​ 3.传入的数据需要进行校验</p><p>​ 4.处理事件的方法写在父组件中</p><h3 id="_27-vue的过滤器怎么使用" tabindex="-1">27.vue的过滤器怎么使用？ <a class="header-anchor" href="#_27-vue的过滤器怎么使用" aria-label="Permalink to &quot;27.vue的过滤器怎么使用？&quot;">​</a></h3><p>​ vue的特性，用来对文本进行格式化处理</p><p>​ 使用它的两个地方，一个是插值表达式，一个是v-bind</p><p>​ 分类：</p><p>​ 1.全局过滤器</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Vue.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;add&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> v</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">v</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">v;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;add&#39;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">v</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> v</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">v</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">v;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>​ 2.本地过滤器</p><p>​ 和methods同级</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> v</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">v</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">v;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">v</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> v</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">v</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">v;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_28-vue中如何做强制刷新" tabindex="-1">28.vue中如何做强制刷新？ <a class="header-anchor" href="#_28-vue中如何做强制刷新" aria-label="Permalink to &quot;28.vue中如何做强制刷新？&quot;">​</a></h3><p>​ 1.localtion.reload()</p><p>​ 2.this.$router.go(0)</p><p>​ 3.provide和inject</p><h3 id="_29-vue3和vue2有哪些区别" tabindex="-1">29.vue3和vue2有哪些区别？ <a class="header-anchor" href="#_29-vue3和vue2有哪些区别" aria-label="Permalink to &quot;29.vue3和vue2有哪些区别？&quot;">​</a></h3><p>​ 1.双向数据绑定的原理不同</p><p>​ 2.是否支持碎片</p><p>​ 3.API不同</p><p>​ 4.定义数据变量方法不同</p><p>​ 5.生命周期不同</p><p>​ 6.传值不同</p><p>​ 7.指令和插槽不同</p><p>​ 8.main.js不同</p><h3 id="_30-vue的性能优化怎么做" tabindex="-1">30.vue的性能优化怎么做？ <a class="header-anchor" href="#_30-vue的性能优化怎么做" aria-label="Permalink to &quot;30.vue的性能优化怎么做？&quot;">​</a></h3><p>​ 1.编码优化</p><p>​ 不要把所有数据放在data中</p><p>​ v-for时给每个元素绑定事件用事件代理</p><p>​ keep-alive缓存组件</p><p>​ 尽可能拆分组件，提高复用性、维护性</p><p>​ 合理使用路由懒加载，异步组件</p><p>​ 数据持久化存储的使用尽量用防抖、节流优化</p><p>​ 2.加载优化</p><p>​ 按需加载</p><p>​ 内容懒加载</p><p>​ 图片懒加载</p><p>​ 3.用户体验</p><p>​ 骨架屏</p><p>​ 4.SEO优化</p><p>​ 预渲染</p><p>​ 服务端渲染ssr</p><p>​ 5.打包优化</p><p>​ CDN形式加载第三方模块</p><p>​ 多线程打包</p><p>​ 抽离公共文件</p><p>​ 6.缓存和压缩</p><p>​ 客户端缓存、服务端缓存</p><p>​ 服务端Gzip压缩</p><h3 id="_31-首屏优化怎么去做" tabindex="-1">31.首屏优化怎么去做？ <a class="header-anchor" href="#_31-首屏优化怎么去做" aria-label="Permalink to &quot;31.首屏优化怎么去做？&quot;">​</a></h3><p>​ 1.使用路由懒加载</p><p>​ 2.非首屏组件使用异步组件</p><p>​ 3.首屏不重要的组件延迟加载</p><p>​ 4.静态资源放在CDN上</p><p>​ 5.减少首屏上js、css等资源文件的大小</p><p>​ 6.使用服务端渲染</p><p>​ 7.尽量减少DOM的数量和层级</p><p>​ 8.使用精灵图请求</p><p>​ 9.做一些loading</p><p>​ 10.开启Gzip压缩</p><p>​ 11.图片懒加载</p><h3 id="_32-vue3的性能为什么比vue2好" tabindex="-1">32.vue3的性能为什么比vue2好？ <a class="header-anchor" href="#_32-vue3的性能为什么比vue2好" aria-label="Permalink to &quot;32.vue3的性能为什么比vue2好？&quot;">​</a></h3><p>​ 1.diff算法的优化</p><p>​ 2.静态提升</p><p>​ 3.事件侦听缓存</p><p>​</p><h3 id="_33-vue3为什么使用proxy" tabindex="-1">33.vue3为什么使用proxy？ <a class="header-anchor" href="#_33-vue3为什么使用proxy" aria-label="Permalink to &quot;33.vue3为什么使用proxy？&quot;">​</a></h3><p>​ 1.proxy可以代理整个对象，defineProperty只代理对象上的某个属性</p><p>​ 2.proxy对代理对象的监听更加丰富</p><p>​ 3.proxy代理对象会生成新的对象，不会修改被代理对象本身</p><p>​ 4.proxy不兼容IE浏览器</p><h3 id="_34-说一下你对组件的理解。" tabindex="-1">34.说一下你对组件的理解。 <a class="header-anchor" href="#_34-说一下你对组件的理解。" aria-label="Permalink to &quot;34.说一下你对组件的理解。&quot;">​</a></h3><p>​ 可以重复使用的vue实例，独一无二的组件名称</p><p>​ 可以抽离成单独的公共模块</p><p>​ 提高代码的复用率</p><h3 id="_35-你是如何规划项目文件的" tabindex="-1">35.你是如何规划项目文件的？ <a class="header-anchor" href="#_35-你是如何规划项目文件的" aria-label="Permalink to &quot;35.你是如何规划项目文件的？&quot;">​</a></h3><p>​ public：</p><p>​ 图标、index.html、img</p><p>​ src:</p><p>​ api</p><p>​ assets</p><p>​ components</p><p>​ 按分类再次划分子目录</p><p>​ plugins</p><p>​ router</p><p>​ static</p><p>​ styles</p><p>​ utils</p><p>​ views</p><p>​ App.vue</p><p>​ main.js</p><p>​ package.json</p><p>​ vue.config.js</p><h3 id="_36-是否使用过nuxt-js" tabindex="-1">36.是否使用过nuxt.js? <a class="header-anchor" href="#_36-是否使用过nuxt-js" aria-label="Permalink to &quot;36.是否使用过nuxt.js?&quot;">​</a></h3><p>​ 是基于vue的应用框架，关注的是渲染，是开发服务端渲染应用的配置</p><p>​ SSR：服务端渲染</p><p>​ 好处：</p><p>​ SSR生成的是由内容的HTML页面，有利于搜索引擎的搜索</p><p>​ 优化了首屏加载时间</p><p>​ SEO：优化搜索引擎</p><p>​ SPA的应用不利于搜索引擎SEO的操作</p><h3 id="_37-seo如何优化" tabindex="-1">37.SEO如何优化？ <a class="header-anchor" href="#_37-seo如何优化" aria-label="Permalink to &quot;37.SEO如何优化？&quot;">​</a></h3><p>​ 1.SSR服务端渲染</p><p>​ 2.预渲染 prerender-spa-plugin</p>`,209),c=[o,t,r];function i(E,y,u,d,h,v){return p(),n("div",null,c)}const b=a(l,[["render",i]]);export{F as __pageData,b as default};
